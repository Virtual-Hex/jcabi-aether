 ------
 Retrieving Maven Plugin Classpath in Runtime
 ------
 Yegor Bugayenko
 ------
 2012-04-04
 ------

~~ #set($sign="$")
~~ Copyright (c) 2012-2017, jcabi.com
~~ All rights reserved.
~~
~~ Redistribution and use in source and binary forms, with or without
~~ modification, are permitted provided that the following conditions
~~ are met: 1) Redistributions of source code must retain the above
~~ copyright notice, this list of conditions and the following
~~ disclaimer. 2) Redistributions in binary form must reproduce the above
~~ copyright notice, this list of conditions and the following
~~ disclaimer in the documentation and/or other materials provided
~~ with the distribution. 3) Neither the name of the jcabi.com nor
~~ the names of its contributors may be used to endorse or promote
~~ products derived from this software without specific prior written
~~ permission.
~~
~~ THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
~~ "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT
~~ NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND
~~ FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL
~~ THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
~~ INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
~~ (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
~~ SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
~~ HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
~~ STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
~~ ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED
~~ OF THE POSSIBILITY OF SUCH DAMAGE.
~~

Retrieving Maven Plugin Classpath in Runtime

  In Maven plugin it is very often necessary to get a full
  classpath (determined by the project dependencies), in relation
  to a certain scope. For example, you want to get a full list
  of all JAR files available for the project in <<<test>>> scope.

  {{{./apidocs-${project.version}/com/jcabi/aether/Classpath.html}<<<Classpath>>>}}
  class helps to do this in one line:

+--
public class MyMojo extends AbstractMojo {
  /**
   * @parameter default-value="${sign}{project}"
   * @readonly
   */
  private MavenProject project;
  /**
   * @parameter default-value="${sign}{repositorySystemSession}"
   * @readonly
   */
  private RepositorySystemSession session;
  @Override
  public void execute() {
    Collection<File> jars = new Classpath(
      this.getProject(),
      this.session.getLocalRepository().getBasedir(),
      "test"
    );
  }
}
+--

  {{{./apidocs-${project.version}/com/jcabi/aether/Classpath.html}<<<Classpath>>>}}
  uses {{{./apidocs-${project.version}/com/jcabi/aether/Aether.html}<<<Aether>>>}}
  to collect required information and resolve all transitive dependencies. It
  also takes into account
  {{{http://maven.apache.org/guides/introduction/introduction-to-optional-and-excludes-dependencies.html}dependency exclusions}}.
